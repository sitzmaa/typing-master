def binary_search(arr, target):
    """Perform binary search on a sorted array."""
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

# Test binary search
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(binary_search(arr, 7))  # Output index of target
[[END]]

def depth_first_search(graph, start):
    """Perform DFS on a graph."""
    visited = set()
    stack = [start]

    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(neighbor for neighbor in graph[vertex] if neighbor not in visited)
    return visited

# Sample graph as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}
print(depth_first_search(graph, 'A'))
[[END]]

def quicksort(arr):
    """Sort an array using the quicksort algorithm."""
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

# Test quicksort
unsorted = [3, 6, 8, 10, 1, 2, 1]
print(quicksort(unsorted))
[[END]]

def count_occurences(s, char):
    """Count occurrences of a character in a string."""
    return s.count(char)

# Count occurrences of 'a' in a string
print(count_occurences("banana", "a"))
[[END]]

def flatten(nested_list):
    """Flatten a nested list."""
    flat_list = []
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten(item))
        else:
            flat_list.append(item)
    return flat_list

# Flatten a nested list
nested = [1, [2, [3, 4], 5], 6]
print(flatten(nested))
[[END]]
