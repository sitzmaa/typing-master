def solve_n_queens(n):
    """Solve the N-Queens problem using backtracking."""
    def is_safe(board, row, col):
        # Check this row on left side
        for i in range(col):
            if board[row][i] == 'Q':
                return False

        # Check upper diagonal on left side
        for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False

        # Check lower diagonal on left side
        for i, j in zip(range(row, n, 1), range(col, -1, -1)):
            if board[i][j] == 'Q':
                return False
        return True

    def solve(board, col):
        if col >= n:
            result.append([''.join(row) for row in board])
            return
        for i in range(n):
            if is_safe(board, i, col):
                board[i][col] = 'Q'
                solve(board, col + 1)
                board[i][col] = '.'

    result = []
    board = [['.' for _ in range(n)] for _ in range(n)]
    solve(board, 0)
    return result

# Solve N-Queens for n=4
n = 4
print("Solutions for 4-Queens:")
for solution in solve_n_queens(n):
    for row in solution:
        print(row)
    print()
[[END]]
def dijkstra(graph, start):
    """Find the shortest path in a graph using Dijkstra's algorithm."""
    import heapq
    min_heap = [(0, start)]
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0

    while min_heap:
        current_distance, current_vertex = heapq.heappop(min_heap)

        if current_distance > distances[current_vertex]:
            continue

        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(min_heap, (distance, neighbor))

    return distances

# Define a graph as an adjacency list
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1},
}

# Find shortest paths from vertex 'A'
print("Shortest paths from A:", dijkstra(graph, 'A'))
[[END]]
def knapsack(weights, values, capacity):
    """Solve the 0/1 knapsack problem using dynamic programming."""
    n = len(values)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    for i in range(n + 1):
        for w in range(capacity + 1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif weights[i - 1] <= w:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp[n][capacity]

# Test knapsack problem
weights = [1, 2, 3]
values = [10, 15, 40]
capacity = 6
print(f"Maximum value in knapsack: {knapsack(weights, values, capacity)}")
[[END]]
def longest_increasing_subsequence(arr):
    """Find the length of the longest increasing subsequence."""
    if not arr:
        return 0
    lis = [1] * len(arr)

    for i in range(1, len(arr)):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1

    return max(lis)

# Test longest increasing subsequence
sequence = [10, 22, 9, 33, 21, 50, 41, 60, 80]
print(f"Length of longest increasing subsequence: {longest_increasing_subsequence(sequence)}")
[[END]]